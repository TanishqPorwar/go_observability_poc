name: go_observability_poc
volumes:
  grafana:
  postgres:
services:


  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  init-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9092 --list
      
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic basic_server --replication-factor 1 --partitions 1
      
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "

  basic_server:
    build:
      context: .
      dockerfile: services/basic_service/Dockerfile
    ports:
      - "8080:8080"
      - "6060:6060"
    environment:
      KAFKA_BROKER_URL: "kafka:9092"
      KAFKA_TOPIC: "basic_server"
    depends_on:
      - kafka

  beyla-basic-server:
    image: grafana/beyla:1.8.4
    pid: "service:basic_server"
    cap_add:
      - SYS_ADMIN
      - SYS_RESOURCE
      - NET_RAW
      - DAC_READ_SEARCH
      - SYS_PTRACE
      - PERFMON
      - BPF
      - CHECKPOINT_RESTORE
    command:
      - /beyla
      - --config=/configs/config.yaml
    volumes:
      - ./docker/beyla/:/configs

    environment:
      BEYLA_OPEN_PORT: "8080,6060"
      BEYLA_SERVICE_NAMESPACE: "zepto"
      BEYLA_PROMETHEUS_PORT: "9090"
      #BEYLA_BPF_TRACK_REQUEST_HEADERS: "true"
      BEYLA_OTEL_METRICS_INSTRUMENTATIONS: "*"
      OTEL_SERVICE_NAME: "beyla-go-basic-server"
      OTEL_EXPORTER_OTLP_TRACES_INSECURE: "true"
      OTEL_EXPORTER_OTLP_PROTOCOL: "grpc"
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "http://alloy:4317"
    depends_on:
      basic_server:
        condition: service_started

  requester_server:
    build:
      context: .
      dockerfile: services/requester_service/Dockerfile
    ports:
      - "8081:8081"
      - "6061:6061"
    environment:
      BASIC_SERVER_URL: "http://basic_server:8080"
      BASIC_SERVER_GRPC_URL: "basic_server:6060"

  beyla-requester-server:
    image: grafana/beyla:1.8.4
    pid: "service:requester_server"
    cap_add:
      - SYS_ADMIN
      - SYS_RESOURCE
      - NET_RAW
      - DAC_READ_SEARCH
      - SYS_PTRACE
      - PERFMON
      - BPF
      - CHECKPOINT_RESTORE
    command:
      - /beyla
      - --config=/configs/config.yaml
    volumes:
      - ./docker/beyla/:/configs
    environment:
      BEYLA_OPEN_PORT: "8081,6061"
      BEYLA_SERVICE_NAMESPACE: "zepto"
      BEYLA_PROMETHEUS_PORT: "9090"
      #BEYLA_BPF_TRACK_REQUEST_HEADERS: "true"
      OTEL_SERVICE_NAME: "beyla-go-requester-server"
      OTEL_EXPORTER_OTLP_TRACES_INSECURE: "true"
      OTEL_EXPORTER_OTLP_PROTOCOL: "grpc"
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "http://alloy:4317"
    depends_on:
      requester_server:
        condition: service_started

  alloy:
    image: grafana/alloy:v1.3.1
    ports:
      - "12347:12345"
      - "12348:12348"
      - "6832:6832"
      - "55679:55679"
    volumes:
      - "./docker/alloy/config.alloy:/etc/alloy/config.alloy"
      - "./docker/alloy/endpoints.json:/etc/alloy/endpoints.json"
    command: [
      "run",
      "--server.http.listen-addr=0.0.0.0:12345",
      "--stability.level=public-preview",
      "/etc/alloy/config.alloy",
    ]

  grafana:
    image: grafana/grafana:11.2.0
    volumes:
      - "./docker/grafana/provisioning:/etc/grafana/provisioning"
    ports:
      - "3000:3000"
    environment:
      - GF_FEATURE_TOGGLES_ENABLE=flameGraph traceqlSearch traceQLStreaming correlations metricsSummary traceqlEditor traceToMetrics traceToProfiles datatrails
      - GF_INSTALL_PLUGINS=grafana-lokiexplore-app,grafana-exploretraces-app,grafana-pyroscope-app
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true

  tempo:
    image: grafana/tempo:2.6.0
    ports:
      - "3200:3200"
      - "4317:4317"
      - "4318:4318"
      - "9411:9411"
      - "55680:55680"
      - "55681:55681"
      - "14250:14250"
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - "./docker/tempo/tempo.yaml:/etc/tempo.yaml"

  mimir:
    image: grafana/mimir:2.13.0
    command: [ "-ingester.native-histograms-ingestion-enabled=true", "-config.file=/etc/mimir.yaml" ]
    ports:
      - "9009:9009"
    volumes:
      - "./docker/mimir/mimir.yaml:/etc/mimir.yaml"

  pyroscope:
    image: grafana/pyroscope:1.8.0
    ports:
      - "4040:4040"
    command: [ "server" ]
